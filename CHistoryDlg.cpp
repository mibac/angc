// generated by Fast Light User Interface Designer (fluid) version 1.0304

#ifndef CHISTORY_H
#include "CHistoryDlg.h"
#endif

#ifndef CGLOBALS_H
#include "globals.h"
#endif

#include <FL/Fl_Tree.H>

#include <iostream>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

string scorStr;
vector<string> vs;
vector<string> dates;

CHistoryDlg *historyDlg = nullptr;
Fl_Button *okBt = nullptr;
int scoreIndex;

void readSavedScores() {
  ifstream inf;
  string s = pathShortScores + "savedScores.text";
  inf.open(s.c_str());

  string line;
  while (getline(inf, line)) {
    string scor;
    scor = line + "\n";
    vs.push_back(scor);
  }
}

void updateScores() {
  initNGCHolesVector();
  string s = vs[scoreIndex].substr(6, 54);
  cout << "s " << s << endl;
  int n = 0;
  string sc;
  string pu;
  string ud;
  for (int ix = 0; ix < k18; ++ix) {
      sc = s.substr(n, 1); n++;
      pu = s.substr(n, 1); n++;
      ud = s.substr(n, 1); n++;
      gScores.setScoreData(ix, sc, pu, ud);
  }
}

void okBt_cb(Fl_Widget *w, void *data) {
  historyDlg->hide();
  cout << vs[scoreIndex];
  updateScores();
}

// Tree's callback
//    Invoked whenever an item's state changes.
//
void TreeCallback(Fl_Widget *w, void *data) {
  Fl_Tree *tree = (Fl_Tree *)w;
  Fl_Tree_Item *item = (Fl_Tree_Item *)tree->callback_item();
  if (!item) return;
  switch (tree->callback_reason()) {
    case FL_TREE_REASON_SELECTED: {
      //   char pathname[256];
      //   tree->item_pathname(pathname, sizeof(pathname), item);
      //   fprintf(stderr, "TreeCallback: Item selected='%s', Full
      //   pathname='%s'\n",
      //           item->label(), pathname);
      scoreIndex = int(item->user_data());
      printf("Item %d selected\n", scoreIndex);
      break;
    }
    case FL_TREE_REASON_DESELECTED:
      // fprintf(stderr, "TreeCallback: Item '%s' deselected\n",
      // item->label());
      break;
    case FL_TREE_REASON_OPENED:
      // fprintf(stderr, "TreeCallback: Item '%s' opened\n", item->label());
      break;
    case FL_TREE_REASON_CLOSED:
      // fprintf(stderr, "TreeCallback: Item '%s' closed\n", item->label());
      break;
#if FL_ABI_VERSION >= 10301
    // To enable this callback, use
    // tree->item_reselect_mode(FL_TREE_SELECTABLE_ALWAYS);
    case FL_TREE_REASON_RESELECTED:
      // fprintf(stderr, "TreeCallback: Item '%s' reselected\n",
      // item->label());
      break;
#endif
    default:
      break;
  }
}

CHistoryDlg::CHistoryDlg(int X, int Y, int W, int H, const char *L)
    : Fl_Window(X, Y, W, H, L) {
  {
    okBt = new Fl_Button(174, kBtnWinBottomY, kBtnW, kBtnH, "OK");
    setButtonStyle(okBt);
    okBt->callback(okBt_cb, this);
  }

  {
    // Create the tree
    Fl_Tree *tree = new Fl_Tree(10, 10, 460, kBtnWinBottomY - 12);
    tree->showroot(0);             // don't show root of tree
    tree->callback(TreeCallback);  // setup a callback for the tree

    tree->item_labelsize(24);
    // Add some items
    readSavedScores();
    string s;
    Fl_Tree_Item *i;
    int indx = 0;
    for (auto itr : vs) {
      s = itr.substr(0, 6);
      i = tree->add(s.c_str());
      i->user_data((void *)indx);
      indx++;
      // cout << s << endl;
    }
    // tree->add("Flintstones/Fred");
    // tree->add("Flintstones/Wilma");
    // tree->add("Flintstones/Pebbles");
    // tree->add("Simpsons/Homer");
    // tree->add("Simpsons/Marge");
    // tree->add("Simpsons/Bart");
    // tree->add("Simpsons/Lisa");
    // tree->add("Pathnames/\\/bin");  // front slashes
    // tree->add("Pathnames/\\/usr\\/sbin");
    // tree->add("Pathnames/C:\\\\Program Files");  // backslashes
    // tree->add("Pathnames/C:\\\\Documents and Settings");
    //
    // // Start with some items closed
    // tree->close("Simpsons");
    // tree->close("Pathnames");
  }

  color((Fl_Color)159);
  label("Score History");
  // set_modal();
  size_range(480, 800, 480, 800);
  end();
  // clear_border();
  show();
}

void createHistoryDlg() { historyDlg = new CHistoryDlg(0, 0, 480, 800); }
