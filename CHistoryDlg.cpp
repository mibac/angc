// generated by Fast Light User Interface Designer (fluid) version 1.0304

#ifndef CHISTORY_H
#include "CHistoryDlg.h"
#endif

#ifndef CSCORECARDDLG_H
#include "CScorecardDlg.h"
#endif

#ifndef CGLOBALS_H
#include "globals.h"
#endif

#include <FL/Fl_Tree.H>

#include <iostream>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

CHistoryDlg *historyDlg = nullptr;
Fl_Button *okBt = nullptr;
int scoreIndex;
vector<string> vSavedScores;

void readSavedScores() {
  ifstream inf;
  string s = pathShortScores + "savedScores.text";
  inf.open(s.c_str());

  string line;
  vSavedScores.erase(vSavedScores.begin(),
                     vSavedScores.begin() + vSavedScores.size());
  while (getline(inf, line)) {
    string scor;
    scor = line + "\n";
    vSavedScores.push_back(scor);
  }
}

void updateScores() {
  // initNGCHolesVector();
  string s = vSavedScores[scoreIndex].substr(6, 54);
  int n = 0;
  for (int ix = 0; ix < k18; ++ix) {
    gsd[ix].score = s.substr(n, 1);
    gsd[ix].putts = s.substr(n + 1, 1);
    gsd[ix].uds = s.substr(n + 2, 1);
    n += 3;
  }
}

void okBt_cb(Fl_Widget *w, void *data) {
  CScorecardDlg *parent = (CScorecardDlg *)data;

  historyDlg->hide();
  cout << vSavedScores[scoreIndex];
  updateScores();
  // parent->activate();
  gScorecard->redraw();
  parent->updateStats();
}

// Tree's callback
//    Invoked whenever an item's state changes.
//
void TreeCallback(Fl_Widget *w, void *data) {
  Fl_Tree *tree = (Fl_Tree *)w;
  Fl_Tree_Item *item = (Fl_Tree_Item *)tree->callback_item();
  if (!item) return;
  switch (tree->callback_reason()) {
    case FL_TREE_REASON_SELECTED: {
      //   char pathname[256];
      //   tree->item_pathname(pathname, sizeof(pathname), item);
      //   fprintf(stderr, "TreeCallback: Item selected='%s', Full
      //   pathname='%s'\n",
      //           item->label(), pathname);
      scoreIndex = int(item->user_data());
      printf("Item %d selected\n", scoreIndex);
      break;
    }
    case FL_TREE_REASON_DESELECTED:
      // fprintf(stderr, "TreeCallback: Item '%s' deselected\n",
      // item->label());
      break;
    case FL_TREE_REASON_OPENED:
      // fprintf(stderr, "TreeCallback: Item '%s' opened\n", item->label());
      break;
    case FL_TREE_REASON_CLOSED:
      // fprintf(stderr, "TreeCallback: Item '%s' closed\n", item->label());
      break;
#if FL_ABI_VERSION >= 10301
    // To enable this callback, use
    // tree->item_reselect_mode(FL_TREE_SELECTABLE_ALWAYS);
    case FL_TREE_REASON_RESELECTED:
      // fprintf(stderr, "TreeCallback: Item '%s' reselected\n",
      // item->label());
      break;
#endif
    default:
      break;
  }
}

CHistoryDlg::CHistoryDlg(int X, int Y, int W, int H, const char *L)
    : Fl_Window(X, Y, W, H, L) {
  {
    okBt = new Fl_Button(174, kBtnWinBottomY, kBtnW, kBtnH, "OK");
    setButtonStyle(okBt);
    okBt->callback(okBt_cb, this);
  }

  {
    // Create the tree
    Fl_Tree *tree = new Fl_Tree(10, 10, 460, kBtnWinBottomY - 12);
    tree->showroot(0);             // don't show root of tree
    tree->callback(TreeCallback);  // setup a callback for the tree

    tree->item_labelsize(24);
    // Add some items
    readSavedScores();
    string s;
    Fl_Tree_Item *i;
    int indx = 0;
    for (auto itr : vSavedScores) {
      s = itr.substr(0, 6);
      i = tree->add(s.c_str());
      i->user_data((void *)indx);
      indx++;
    }
  }

  color((Fl_Color)159);
  label("Score History");
  // set_modal();
  size_range(480, 800, 480, 800);
  end();
  // clear_border();
  show();
}

void createHistoryDlg() {
  historyDlg = new CHistoryDlg(0, 0, 480, 800);
  gFront9 = true;
}
